// Automatically generated by MockGen. DO NOT EDIT!
// Source: heka/pipeline (interfaces: InputRunner)

package pipelinemock

import (
	sync "sync"
	time "time"
	gomock "github.com/rafrombrc/gomock/gomock"
	pipeline "heka/pipeline"
)

// Mock of InputRunner interface
type MockInputRunner struct {
	ctrl     *gomock.Controller
	recorder *_MockInputRunnerRecorder
}

// Recorder for MockInputRunner (not exported)
type _MockInputRunnerRecorder struct {
	mock *MockInputRunner
}

func NewMockInputRunner(ctrl *gomock.Controller) *MockInputRunner {
	mock := &MockInputRunner{ctrl: ctrl}
	mock.recorder = &_MockInputRunnerRecorder{mock}
	return mock
}

func (_m *MockInputRunner) EXPECT() *_MockInputRunnerRecorder {
	return _m.recorder
}

func (_m *MockInputRunner) Deliver(_param0 *pipeline.PipelinePack) {
	_m.ctrl.Call(_m, "Deliver", _param0)
}

func (_mr *_MockInputRunnerRecorder) Deliver(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Deliver", arg0)
}

func (_m *MockInputRunner) InChan() chan *pipeline.PipelinePack {
	ret := _m.ctrl.Call(_m, "InChan")
	ret0, _ := ret[0].(chan *pipeline.PipelinePack)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) InChan() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InChan")
}

func (_m *MockInputRunner) Inject(_param0 *pipeline.PipelinePack) error {
	ret := _m.ctrl.Call(_m, "Inject", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Inject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Inject", arg0)
}

func (_m *MockInputRunner) Input() pipeline.Input {
	ret := _m.ctrl.Call(_m, "Input")
	ret0, _ := ret[0].(pipeline.Input)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Input() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Input")
}

func (_m *MockInputRunner) IsStoppable() bool {
	ret := _m.ctrl.Call(_m, "IsStoppable")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) IsStoppable() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsStoppable")
}

func (_m *MockInputRunner) LeakCount() int {
	ret := _m.ctrl.Call(_m, "LeakCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) LeakCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeakCount")
}

func (_m *MockInputRunner) LogError(_param0 error) {
	_m.ctrl.Call(_m, "LogError", _param0)
}

func (_mr *_MockInputRunnerRecorder) LogError(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogError", arg0)
}

func (_m *MockInputRunner) LogMessage(_param0 string) {
	_m.ctrl.Call(_m, "LogMessage", _param0)
}

func (_mr *_MockInputRunnerRecorder) LogMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogMessage", arg0)
}

func (_m *MockInputRunner) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockInputRunner) NewDeliverer(_param0 string) pipeline.Deliverer {
	ret := _m.ctrl.Call(_m, "NewDeliverer", _param0)
	ret0, _ := ret[0].(pipeline.Deliverer)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) NewDeliverer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewDeliverer", arg0)
}

func (_m *MockInputRunner) NewSplitterRunner(_param0 string) pipeline.SplitterRunner {
	ret := _m.ctrl.Call(_m, "NewSplitterRunner", _param0)
	ret0, _ := ret[0].(pipeline.SplitterRunner)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) NewSplitterRunner(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewSplitterRunner", arg0)
}

func (_m *MockInputRunner) Plugin() pipeline.Plugin {
	ret := _m.ctrl.Call(_m, "Plugin")
	ret0, _ := ret[0].(pipeline.Plugin)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Plugin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Plugin")
}

func (_m *MockInputRunner) SetLeakCount(_param0 int) {
	_m.ctrl.Call(_m, "SetLeakCount", _param0)
}

func (_mr *_MockInputRunnerRecorder) SetLeakCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLeakCount", arg0)
}

func (_m *MockInputRunner) SetName(_param0 string) {
	_m.ctrl.Call(_m, "SetName", _param0)
}

func (_mr *_MockInputRunnerRecorder) SetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetName", arg0)
}

func (_m *MockInputRunner) SetTransient(_param0 bool) {
	_m.ctrl.Call(_m, "SetTransient", _param0)
}

func (_mr *_MockInputRunnerRecorder) SetTransient(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTransient", arg0)
}

func (_m *MockInputRunner) Start(_param0 pipeline.PluginHelper, _param1 *sync.WaitGroup) error {
	ret := _m.ctrl.Call(_m, "Start", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0, arg1)
}

func (_m *MockInputRunner) SynchronousDecode() bool {
	ret := _m.ctrl.Call(_m, "SynchronousDecode")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) SynchronousDecode() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SynchronousDecode")
}

func (_m *MockInputRunner) Ticker() <-chan time.Time {
	ret := _m.ctrl.Call(_m, "Ticker")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Ticker() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ticker")
}

func (_m *MockInputRunner) Transient() bool {
	ret := _m.ctrl.Call(_m, "Transient")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Transient() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Transient")
}

func (_m *MockInputRunner) Unregister(_param0 *pipeline.PipelineConfig) error {
	ret := _m.ctrl.Call(_m, "Unregister", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInputRunnerRecorder) Unregister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unregister", arg0)
}
