// Automatically generated by MockGen. DO NOT EDIT!
// Source: heka/pipeline (interfaces: PluginHelper)

package pipelinemock

import (
	pipeline "heka/pipeline"
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of PluginHelper interface
type MockPluginHelper struct {
	ctrl     *gomock.Controller
	recorder *_MockPluginHelperRecorder
}

// Recorder for MockPluginHelper (not exported)
type _MockPluginHelperRecorder struct {
	mock *MockPluginHelper
}

func NewMockPluginHelper(ctrl *gomock.Controller) *MockPluginHelper {
	mock := &MockPluginHelper{ctrl: ctrl}
	mock.recorder = &_MockPluginHelperRecorder{mock}
	return mock
}

func (_m *MockPluginHelper) EXPECT() *_MockPluginHelperRecorder {
	return _m.recorder
}

func (_m *MockPluginHelper) DecoderRunner(_param0 string, _param1 string) (pipeline.DecoderRunner, bool) {
	ret := _m.ctrl.Call(_m, "DecoderRunner", _param0, _param1)
	ret0, _ := ret[0].(pipeline.DecoderRunner)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockPluginHelperRecorder) DecoderRunner(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecoderRunner", arg0, arg1)
}

func (_m *MockPluginHelper) Encoder(_param0 string, _param1 string) (pipeline.Encoder, bool) {
	ret := _m.ctrl.Call(_m, "Encoder", _param0, _param1)
	ret0, _ := ret[0].(pipeline.Encoder)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockPluginHelperRecorder) Encoder(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encoder", arg0, arg1)
}

func (_m *MockPluginHelper) Filter(_param0 string) (pipeline.FilterRunner, bool) {
	ret := _m.ctrl.Call(_m, "Filter", _param0)
	ret0, _ := ret[0].(pipeline.FilterRunner)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockPluginHelperRecorder) Filter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Filter", arg0)
}

func (_m *MockPluginHelper) Hostname() string {
	ret := _m.ctrl.Call(_m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPluginHelperRecorder) Hostname() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Hostname")
}

func (_m *MockPluginHelper) Output(_param0 string) (pipeline.OutputRunner, bool) {
	ret := _m.ctrl.Call(_m, "Output", _param0)
	ret0, _ := ret[0].(pipeline.OutputRunner)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockPluginHelperRecorder) Output(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Output", arg0)
}

func (_m *MockPluginHelper) PipelineConfig() *pipeline.PipelineConfig {
	ret := _m.ctrl.Call(_m, "PipelineConfig")
	ret0, _ := ret[0].(*pipeline.PipelineConfig)
	return ret0
}

func (_mr *_MockPluginHelperRecorder) PipelineConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PipelineConfig")
}

func (_m *MockPluginHelper) PipelinePack(_param0 uint) (*pipeline.PipelinePack, error) {
	ret := _m.ctrl.Call(_m, "PipelinePack", _param0)
	ret0, _ := ret[0].(*pipeline.PipelinePack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginHelperRecorder) PipelinePack(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PipelinePack", arg0)
}

func (_m *MockPluginHelper) StatAccumulator(_param0 string) (pipeline.StatAccumulator, error) {
	ret := _m.ctrl.Call(_m, "StatAccumulator", _param0)
	ret0, _ := ret[0].(pipeline.StatAccumulator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPluginHelperRecorder) StatAccumulator(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StatAccumulator", arg0)
}

func (_m *MockPluginHelper) StopDecoderRunner(_param0 pipeline.DecoderRunner) bool {
	ret := _m.ctrl.Call(_m, "StopDecoderRunner", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPluginHelperRecorder) StopDecoderRunner(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopDecoderRunner", arg0)
}
