// Automatically generated by MockGen. DO NOT EDIT!
// Source: heka/pipeline (interfaces: DecoderRunner)

package pipelinemock

import (
	pipeline "heka/pipeline"
	sync "sync"
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of DecoderRunner interface
type MockDecoderRunner struct {
	ctrl     *gomock.Controller
	recorder *_MockDecoderRunnerRecorder
}

// Recorder for MockDecoderRunner (not exported)
type _MockDecoderRunnerRecorder struct {
	mock *MockDecoderRunner
}

func NewMockDecoderRunner(ctrl *gomock.Controller) *MockDecoderRunner {
	mock := &MockDecoderRunner{ctrl: ctrl}
	mock.recorder = &_MockDecoderRunnerRecorder{mock}
	return mock
}

func (_m *MockDecoderRunner) EXPECT() *_MockDecoderRunnerRecorder {
	return _m.recorder
}

func (_m *MockDecoderRunner) Decoder() pipeline.Decoder {
	ret := _m.ctrl.Call(_m, "Decoder")
	ret0, _ := ret[0].(pipeline.Decoder)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) Decoder() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decoder")
}

func (_m *MockDecoderRunner) InChan() chan *pipeline.PipelinePack {
	ret := _m.ctrl.Call(_m, "InChan")
	ret0, _ := ret[0].(chan *pipeline.PipelinePack)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) InChan() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InChan")
}

func (_m *MockDecoderRunner) IsStoppable() bool {
	ret := _m.ctrl.Call(_m, "IsStoppable")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) IsStoppable() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsStoppable")
}

func (_m *MockDecoderRunner) LeakCount() int {
	ret := _m.ctrl.Call(_m, "LeakCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) LeakCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeakCount")
}

func (_m *MockDecoderRunner) LogError(_param0 error) {
	_m.ctrl.Call(_m, "LogError", _param0)
}

func (_mr *_MockDecoderRunnerRecorder) LogError(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogError", arg0)
}

func (_m *MockDecoderRunner) LogMessage(_param0 string) {
	_m.ctrl.Call(_m, "LogMessage", _param0)
}

func (_mr *_MockDecoderRunnerRecorder) LogMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogMessage", arg0)
}

func (_m *MockDecoderRunner) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockDecoderRunner) NewPack() *pipeline.PipelinePack {
	ret := _m.ctrl.Call(_m, "NewPack")
	ret0, _ := ret[0].(*pipeline.PipelinePack)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) NewPack() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewPack")
}

func (_m *MockDecoderRunner) Plugin() pipeline.Plugin {
	ret := _m.ctrl.Call(_m, "Plugin")
	ret0, _ := ret[0].(pipeline.Plugin)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) Plugin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Plugin")
}

func (_m *MockDecoderRunner) Router() pipeline.MessageRouter {
	ret := _m.ctrl.Call(_m, "Router")
	ret0, _ := ret[0].(pipeline.MessageRouter)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) Router() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Router")
}

func (_m *MockDecoderRunner) SetFailureHandling(_param0 bool, _param1 bool) {
	_m.ctrl.Call(_m, "SetFailureHandling", _param0, _param1)
}

func (_mr *_MockDecoderRunnerRecorder) SetFailureHandling(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFailureHandling", arg0, arg1)
}

func (_m *MockDecoderRunner) SetLeakCount(_param0 int) {
	_m.ctrl.Call(_m, "SetLeakCount", _param0)
}

func (_mr *_MockDecoderRunnerRecorder) SetLeakCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLeakCount", arg0)
}

func (_m *MockDecoderRunner) SetName(_param0 string) {
	_m.ctrl.Call(_m, "SetName", _param0)
}

func (_mr *_MockDecoderRunnerRecorder) SetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetName", arg0)
}

func (_m *MockDecoderRunner) Start(_param0 pipeline.PluginHelper, _param1 *sync.WaitGroup) {
	_m.ctrl.Call(_m, "Start", _param0, _param1)
}

func (_mr *_MockDecoderRunnerRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0, arg1)
}

func (_m *MockDecoderRunner) Unregister(_param0 *pipeline.PipelineConfig) error {
	ret := _m.ctrl.Call(_m, "Unregister", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDecoderRunnerRecorder) Unregister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unregister", arg0)
}
