// Automatically generated by MockGen. DO NOT EDIT!
// Source: heka/pipeline (interfaces: OutputRunner)

package pipelinemock

import (
	pipeline "heka/pipeline"
	sync "sync"
	time "time"
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of OutputRunner interface
type MockOutputRunner struct {
	ctrl     *gomock.Controller
	recorder *_MockOutputRunnerRecorder
}

// Recorder for MockOutputRunner (not exported)
type _MockOutputRunnerRecorder struct {
	mock *MockOutputRunner
}

func NewMockOutputRunner(ctrl *gomock.Controller) *MockOutputRunner {
	mock := &MockOutputRunner{ctrl: ctrl}
	mock.recorder = &_MockOutputRunnerRecorder{mock}
	return mock
}

func (_m *MockOutputRunner) EXPECT() *_MockOutputRunnerRecorder {
	return _m.recorder
}

func (_m *MockOutputRunner) BackPressured() bool {
	ret := _m.ctrl.Call(_m, "BackPressured")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) BackPressured() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BackPressured")
}

func (_m *MockOutputRunner) Encode(_param0 *pipeline.PipelinePack) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Encode", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOutputRunnerRecorder) Encode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode", arg0)
}

func (_m *MockOutputRunner) Encoder() pipeline.Encoder {
	ret := _m.ctrl.Call(_m, "Encoder")
	ret0, _ := ret[0].(pipeline.Encoder)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) Encoder() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encoder")
}

func (_m *MockOutputRunner) InChan() chan *pipeline.PipelinePack {
	ret := _m.ctrl.Call(_m, "InChan")
	ret0, _ := ret[0].(chan *pipeline.PipelinePack)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) InChan() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InChan")
}

func (_m *MockOutputRunner) IsStoppable() bool {
	ret := _m.ctrl.Call(_m, "IsStoppable")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) IsStoppable() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsStoppable")
}

func (_m *MockOutputRunner) LeakCount() int {
	ret := _m.ctrl.Call(_m, "LeakCount")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) LeakCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeakCount")
}

func (_m *MockOutputRunner) LogError(_param0 error) {
	_m.ctrl.Call(_m, "LogError", _param0)
}

func (_mr *_MockOutputRunnerRecorder) LogError(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogError", arg0)
}

func (_m *MockOutputRunner) LogMessage(_param0 string) {
	_m.ctrl.Call(_m, "LogMessage", _param0)
}

func (_mr *_MockOutputRunnerRecorder) LogMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogMessage", arg0)
}

func (_m *MockOutputRunner) MatchRunner() *pipeline.MatchRunner {
	ret := _m.ctrl.Call(_m, "MatchRunner")
	ret0, _ := ret[0].(*pipeline.MatchRunner)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) MatchRunner() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MatchRunner")
}

func (_m *MockOutputRunner) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockOutputRunner) OldOutput() pipeline.OldOutput {
	ret := _m.ctrl.Call(_m, "OldOutput")
	ret0, _ := ret[0].(pipeline.OldOutput)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) OldOutput() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OldOutput")
}

func (_m *MockOutputRunner) Output() pipeline.Output {
	ret := _m.ctrl.Call(_m, "Output")
	ret0, _ := ret[0].(pipeline.Output)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) Output() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Output")
}

func (_m *MockOutputRunner) Plugin() pipeline.Plugin {
	ret := _m.ctrl.Call(_m, "Plugin")
	ret0, _ := ret[0].(pipeline.Plugin)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) Plugin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Plugin")
}

func (_m *MockOutputRunner) RetainPack(_param0 *pipeline.PipelinePack) {
	_m.ctrl.Call(_m, "RetainPack", _param0)
}

func (_mr *_MockOutputRunnerRecorder) RetainPack(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetainPack", arg0)
}

func (_m *MockOutputRunner) SetLeakCount(_param0 int) {
	_m.ctrl.Call(_m, "SetLeakCount", _param0)
}

func (_mr *_MockOutputRunnerRecorder) SetLeakCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLeakCount", arg0)
}

func (_m *MockOutputRunner) SetName(_param0 string) {
	_m.ctrl.Call(_m, "SetName", _param0)
}

func (_mr *_MockOutputRunnerRecorder) SetName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetName", arg0)
}

func (_m *MockOutputRunner) SetUseFraming(_param0 bool) {
	_m.ctrl.Call(_m, "SetUseFraming", _param0)
}

func (_mr *_MockOutputRunnerRecorder) SetUseFraming(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUseFraming", arg0)
}

func (_m *MockOutputRunner) Start(_param0 pipeline.PluginHelper, _param1 *sync.WaitGroup) error {
	ret := _m.ctrl.Call(_m, "Start", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0, arg1)
}

func (_m *MockOutputRunner) StopChan() chan bool {
	ret := _m.ctrl.Call(_m, "StopChan")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) StopChan() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopChan")
}

func (_m *MockOutputRunner) Ticker() <-chan time.Time {
	ret := _m.ctrl.Call(_m, "Ticker")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) Ticker() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ticker")
}

func (_m *MockOutputRunner) Unregister(_param0 *pipeline.PipelineConfig) error {
	ret := _m.ctrl.Call(_m, "Unregister", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) Unregister(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unregister", arg0)
}

func (_m *MockOutputRunner) UpdateCursor(_param0 string) {
	_m.ctrl.Call(_m, "UpdateCursor", _param0)
}

func (_mr *_MockOutputRunnerRecorder) UpdateCursor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCursor", arg0)
}

func (_m *MockOutputRunner) UsesBuffering() bool {
	ret := _m.ctrl.Call(_m, "UsesBuffering")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) UsesBuffering() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UsesBuffering")
}

func (_m *MockOutputRunner) UsesFraming() bool {
	ret := _m.ctrl.Call(_m, "UsesFraming")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockOutputRunnerRecorder) UsesFraming() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UsesFraming")
}
